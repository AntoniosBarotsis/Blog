<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>No Code on My Blog</title>
    <link>https://antoniosbarotsis.github.io/Blog/categories/no-code/</link>
    <description>Recent content in No Code on My Blog</description>
    <image>
      <url>https://antoniosbarotsis.github.io/Blog/papermod-cover.png</url>
      <link>https://antoniosbarotsis.github.io/Blog/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Feb 2022 19:05:19 +0200</lastBuildDate><atom:link href="https://antoniosbarotsis.github.io/Blog/categories/no-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Zip it and ship it!</title>
      <link>https://antoniosbarotsis.github.io/Blog/posts/zipitandshipit/</link>
      <pubDate>Tue, 01 Feb 2022 19:05:19 +0200</pubDate>
      
      <guid>https://antoniosbarotsis.github.io/Blog/posts/zipitandshipit/</guid>
      <description>How I published a CLI tool in Chocolatey and Nuget.</description>
      <content:encoded><![CDATA[<!-- fix the date! -->
<h1 id="introduction">Introduction</h1>
<p>I recently started working on a command line tool that uses git hooks to remind you to run your
tests and builds before pushing your code among other stuff and I decided to package that and
publish it so anyone could use it. The project itself is nothing too impressive or innovative
so in this post I will be mostly focusing on the packaging and publication process rather than
the project itself but in case you are interested in checking it out, click
<a href="https://github.com/AntoniosBarotsis/Rember">here</a> and go make some issues :)</p>
<p>I&rsquo;ll be explaining how I published said package and how to make a Github Actions CD workflow
to publish your new releases automatically.</p>
<h2 id="why">Why</h2>
<p>I feel like most if not all developers find the idea of making their work available for anyone
to check out and use an exciting one and I definitely relate to that. I personally really like
working on things that can be used by other developers specifically and that&rsquo;s the main reasons
why I started this project and why I decided to make it easily accessible to anyone (unless
you are not on windows because I was too lazy to check how that would work).</p>
<p>I decided early on that I wanted to publish my code on 2 platforms; the package manager of my
language of choice (in this case, NuGet) and a more general purpose package manager like
<a href="https://chocolatey.org/">Chocolatey</a> so that my audience would not be limited to developers
from my tech stack only.</p>
<h2 id="what-did-i-build-exactly">What did I build exactly</h2>
<p>The project was built using C# mostly because of <a href="https://www.youtube.com/watch?v=JNDgcBDZPkU">this</a>
video I came across (great YouTuber by the way, make sure to check his channel out for C# content). TLDR; C#
has this thing called <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools">dotnet tools</a> which
are essentially command line applications that are very easy to make and package. The linked video walks you
through creating one from scratch.</p>
<h1 id="uploading-to-nuget">Uploading to NuGet</h1>
<h2 id="preparing">Preparing</h2>
<p>Once you have your CLI tool up and running there&rsquo;s only that many steps left to push it to NuGet.</p>
<p>The mentioned video already guides you through adding most of the stuff that you need in your <code>.csproj</code>
file but here&rsquo;s a few more things you might want to add:</p>
<ul>
<li>
<p>A README file</p>
<p>If you want your NuGet package to display the README file you spent hours filling with meaningless
badges, this is for you. All you have to do is add the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;PropertyGroup&gt;</span>
  ...
  <span style="color:#f92672">&lt;PackageReadmeFile&gt;</span>README.md<span style="color:#f92672">&lt;/PackageReadmeFile&gt;</span>
<span style="color:#f92672">&lt;/PropertyGroup&gt;</span>

<span style="color:#f92672">&lt;ItemGroup&gt;</span>
  <span style="color:#f92672">&lt;None</span> <span style="color:#a6e22e">Include=</span><span style="color:#e6db74">&#34;../README.md&#34;</span> <span style="color:#a6e22e">Pack=</span><span style="color:#e6db74">&#34;true&#34;</span> <span style="color:#a6e22e">PackagePath=</span><span style="color:#e6db74">&#34;\&#34;</span> <span style="color:#f92672">/&gt;</span>
<span style="color:#f92672">&lt;/ItemGroup&gt;</span>
</code></pre></div><p>This tells NuGet to use our <code>README.md</code> file as the package README file but for that to work we must
make sure that this is packaged into our <code>nupkg</code> file. This might be different in your project but
my project has a separate folder for the actual code instead of it also being in the root of the project</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">│   README.md
│   Rember.sln
│
├───publish
│       Rember
│       Rember.exe
│
├───Rember
│   │   Rember.csproj
</code></pre></div><p>Because of that, my <code>Include</code> parameter goes a directory up to reference the README file.</p>
</li>
<li>
<p>Other useful tags might include <code>RepositoryUrl</code> to link your Github repo and <code>PackageTags</code>
to provide a list of space-delimited tags for your package.</p>
</li>
<li>
<p>I do also recommend specifying the <code>RuntimeIdentifier</code> to something like <code>win-x64</code> although from
what I understand this is not necessary but better safe than sorry!</p>
</li>
</ul>
<h2 id="pushing-the-package">Pushing the Package</h2>
<p>That pretty much concludes the needed preparations for NuGet so time to actually push the thing.</p>
<p>Run <code>dotnet pack</code> and you should get something along the lines of <code>Successfully created package 'path/to/package.nupkg'</code>.</p>
<p>Next you want to grab yourself a NuGet API Key from <a href="https://www.nuget.org/account/apikeys">here</a>
and run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dotnet nuget push path/to/package.nupkg <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --api-key &lt;API_KEY&gt; <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --source https://api.nuget.org/v3/index.json
</code></pre></div><p>If all goes well your package will be soon available on NuGet! Wasn&rsquo;t that simple?</p>
<h1 id="uploading-to-chocolatey">Uploading to Chocolatey</h1>
<h2 id="preparing-1">Preparing</h2>
<p>Chocolatey requires you to provide a so called <code>nuspec</code> file which essentially provides some details
for your package. I personally found their <a href="https://docs.chocolatey.org/en-us/create/create-packages#nuspec">docs</a>
a bit confusing so if you get confused perhaps looking over at my repository could help you out more after you&rsquo;ve
read through them.</p>
<p>You will see that most of the stuff we specify are essentially the same as what we specified earlier for NuGet.
Only thing to note here is that you want to make sure that everything your package needs ends up in the <code>tools</code>
folder.</p>
<h2 id="compiling">Compiling</h2>
<p>Uploading to Choco is a little more complicated. First of all, we need to compile our code to a single
file that has everything it needs to run bundled inside of it aka, a self contained file. It is also a
good idea to try and remove anything that is not used in terms of libraries considering how much larger
this file is going to be compared to the <code>nupkg</code> file we created earlier. Take a look at the docs for
<a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish">dotnet publish</a> but TLDR; our command
will look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dotnet publish -o tools <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --self-contained True <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  /property:PublishTrimmed<span style="color:#f92672">=</span>True <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  /property:PublishSingleFile<span style="color:#f92672">=</span>True
</code></pre></div><p>The reason why I specify these properties in the arguments of the command instead of in the <code>csproj</code>
file is because I would have to keep toggling them on and off depending on whether I was
targetting NuGet or Choco.</p>
<p>I also specify the following in the <code>csproj</code> file to hopefully cut the executable file size down a
bit more:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;DebugType&gt;</span>none<span style="color:#f92672">&lt;/DebugType&gt;</span>
<span style="color:#f92672">&lt;DebugSymbols&gt;</span>false<span style="color:#f92672">&lt;/DebugSymbols&gt;</span>
<span style="color:#f92672">&lt;Configuration&gt;</span>release<span style="color:#f92672">&lt;/Configuration&gt;</span>
</code></pre></div><p>This should create a <code>.exe</code> file in the <code>tools</code> folder.</p>
<h2 id="pushing-to-chocolatey">Pushing to Chocolatey</h2>
<p>We are almost done! We now only need to run the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">choco pack
choco push --api-key<span style="color:#f92672">=</span>&lt;API KEY&gt;
</code></pre></div><p>Your API key can be found <a href="https://community.chocolatey.org/account">here</a> and I do not know why
navigating to your profile page is so hard on their website.</p>
<p>Publications on Chocolatey take way longer than NuGet (around 1-3 hours from personal experience)
so sit back, go grab yourself some coffee, do some laundry, watch some YouTube, call your friends,
finish that one side project you abandoned 7 months ago, and check your email every 2 minutes in
case something goes wrong with the publication.</p>
<h1 id="time-to-make-a-workflow">Time to make a Workflow</h1>
<p>Workflows are great! They do the boring, repetitive stuff for you automatically so you don&rsquo;t have
to worry about forgetting them or doing something wrong, your project looks cooler and more serious
with them but most importantly, from what I understand, they qualify you for DevOps positions which
pay quite well so that&rsquo;s the main reason why you should care about making them 👍</p>
<p>Feel free to check <a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#release">Github&rsquo;s docs</a>.</p>
<p>We first start by specifying that we want our workflow to run on a new release publication</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">on</span>:
  <span style="color:#f92672">release</span>:
    <span style="color:#f92672">types</span>: [<span style="color:#ae81ff">published]</span>
</code></pre></div><p>The release event has a bunch of different types that are explained very nicely in the documentation,
I personally chose <code>published</code> which gets triggered for normal as well as pre-releases.</p>
<p>The good news is that this is a very simply workflow because we&rsquo;ve already figured out how to do most
of the work from our terminals!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">jobs</span>:
  <span style="color:#f92672">publish</span>:
    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">windows-latest</span>
    <span style="color:#f92672">steps</span>:
      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-dotnet@v1</span>
        <span style="color:#f92672">with</span>:
          <span style="color:#f92672">dotnet-version</span>: <span style="color:#e6db74">&#39;6.0.x&#39;</span>
      <span style="color:#75715e"># Nuget </span>
      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">dotnet pack</span>
      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">dotnet nuget push .\Rember\nupkg\*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json</span>
        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Nuget publish</span>
      <span style="color:#75715e"># Choco</span>
      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">dotnet publish -o tools --verbosity normal --self-contained True /property:PublishTrimmed=True /property:PublishSingleFile=True </span>
      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">choco pack</span>
      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">choco push --api-key=${{ secrets.CHOCO_API_KEY }}</span>
        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Choco publish</span>
</code></pre></div><p>As you can see, I checkout to my repository and set up Dotnet 6 before running the exact same commands
I mentioned earlier. The only thing left now is to set the <code>NUGET_API_KEY</code> and <code>CHOCO_API_KEY</code> secrets
in your github repository and create your first release!</p>
<h1 id="closing">Closing</h1>
<p>Overall, I feel like this was a little less exciting than some of my other posts but to me, the whole process
of publishing this project was quite exciting and I wanted to write something about it. Hopefully this inspires
someone to go make his own package or library and make it available, same way Nick&rsquo;s video inspired me to work
on this project. Till next time!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Project Demeter: Part 2</title>
      <link>https://antoniosbarotsis.github.io/Blog/posts/demeter/part_2/</link>
      <pubDate>Fri, 24 Dec 2021 08:59:03 +0200</pubDate>
      
      <guid>https://antoniosbarotsis.github.io/Blog/posts/demeter/part_2/</guid>
      <description>The early stages</description>
      <content:encoded><![CDATA[<p>It&rsquo;s been sometime since my last post but I just now got to work on the project again.</p>
<h1 id="progress-since-last-time">Progress since last time</h1>
<p>The bulk of the additions since last time concern authentication;</p>
<ul>
<li>Added <code>Login</code> and <code>Refresh</code> endpoints. I&rsquo;m not sure if the concept of refresh tokens were there
last time but they are there now. The idea is that you have the normal JSON Web Token which
expires 10 minutes after you create it (reminder to self to check if I handle timezones properly
at some point) but the user also gets a refresh token on login which expires 6 months later,
this way whatever client interacts with the app won&rsquo;t have to ask the user for his credentials
since it can just keep using and refreshing the token.</li>
<li>The database now also stores <code>Orders</code> and <code>MenuItems</code>.</li>
<li>I realized my caching had a small bug where <code>User.PastOrders</code> would not get populated after
parsing the results from the cache entry even though the data was in the returned JSON string.
This got my stuck for an afternoon. I tried a few different things like adding empty
constructors to the <code>User</code> class,  adding a constructor that takes the <code>MenuItems</code> as input and
annotating it with <code>[JsonConstructor]</code> but none of these worked. Turns out I&rsquo;d forgotten to add
a setter to the <code>MenuItems</code> attribute&hellip; I had another bug with the refresh token being
considered invalid if the token was expired and it expiring a few minutes off of when it should
be but those were more like &ldquo;code wrong&rdquo; instead of an elaborate, complicated issue where turns
out you just forgot a setter.</li>
<li>Most of these were added last time but since I didn&rsquo;t mention this before; I made a few
Powershell scripts for things like starting or watching the app, applying migrations etc.
While those do obviously work with the <code>dotnet</code> CLI (which is what the scripts use as well)
you had to keep adding the <code>project</code> flag to point the CLI to the correct project which got
tedious quite fast and is the only reason why I bothered making these, you&rsquo;re welcome.</li>
<li>I learned about this pretty handy feature of C# which is extension methods. Basically,
you create a static method that ends up being used as a method of another class without
needing to create a whole different class that inherits from the one you want to add the method
to or having to put the class instance inside the method which just looks weird. I used this
for having all my <code>Include</code> statements for the <code>User</code> class; because <code>User</code> is a very decently
nested class, I have to make a few unions everytime I make a database call and instead of
putting the same unions in all my <code>User</code> queries I made an extension method for the <code>User</code>
<code>DbSet</code> so that all those unions are in one place. Using it is very easy as instead of
doing <code>context.Users</code> I do <code>context.Users.BuildUser.Result</code> where <code>BuildUser</code> is my extension
method&rsquo;s name. As you may notice, it is an async method which is not necessary for this to work
but I also use it to calculate and populate some fields that are not mapped to the database such
as the price of an order (which is the sum of all the items in that order). This was overall a
very useful feature with way too many applications and I was completely unaware of it. I will
definitely be finding many uses for it in the future.</li>
<li>Not as exciting but finally got around making an endpoint that returns your own user now that
authentication works. I just use the user id that I store in the token to make a <code>findOne</code>
database query.</li>
<li>Lastly, because I also took some time to test <em>most</em> stuff, I realized that the Authentication
service was a bit too complicated and hard to test so I decided to move some of the code to a
separate &ldquo;Token&rdquo; service. Honestly, the biggest perk of testing for me is how it forces you
to rethink your code quality. Most of the times I end up doing quite a bit of manual testing
before I write my tests and thus I hardly ever actually discover bugs through my testing
(which may or may not be a bad thing) but the refactoring I end up doing pretty often is always
cool.</li>
</ul>
<h1 id="the-next-steps">The next steps</h1>
<p>Not entirely sure when I&rsquo;ll be working on this again (hopefully soon!) but here&rsquo;s the plan for next
time.</p>
<ul>
<li>
<p>Extend the cache for the <code>findOne</code> user endpoint and whichever new entities I end up adding</p>
</li>
<li>
<p>I want to look into a few potential refactorings including where the cache logic is at the
moment; right not cache lookups happen in the services but I feel like it makes more sense to
move those to the repositories since it is still a data access operation and the service should
not care about where the data comes from as long as it&rsquo;s there.</p>
</li>
<li>
<p>I want to look into potential exceptions that I&rsquo;d want to add. One example of this would be
invalid user credentials (empty names or other stuff like that) and just generally things
that could go wrong with user input. With this I also want to take a look at my response codes
and change them where needed.</p>
</li>
<li>
<p>I think I&rsquo;ll try to work on items before the next time and I really want to have a paginated
output. I&rsquo;m thinking of having a <code>getAll</code> endpoint that will give you all items from a restaurant
but in pages. You should be able to change the page size (with some limitations of course) and
select what page number you want returned. A really cool thing to add here would be to have
products presorted in the database but I am not sure if</p>
<ul>
<li>that is possible</li>
<li>or efficient</li>
</ul>
<p>I will definitely try looking into this though. Adding to this, I&rsquo;ll start looking into indices
since I do want to have the output of this sorted in some way.</p>
</li>
<li>
<p>I still haven&rsquo;t tested <code>tokenService</code> so there&rsquo;s that. Some of the stuff in there seemed rather
hard to test (at least compared to other stuff I had to test before) <em>which is also why I moved
it out of the authentication service</em>.</p>
</li>
<li>
<p>I need to add DTOs. So far, only users have one and it most likely will have to be changed.</p>
</li>
</ul>
<h1 id="closing">Closing</h1>
<p>Thank you for reading once again! The repo can be found <a href="https://github.com/AntoniosBarotsis/Demeter">here</a>.
I am glad that I am still working on this albeit at a pretty slow pace. I often do not have that
much energy to spend on this after university work unfortunately but as we say in Greece,
&ldquo;rather slow than never&rdquo;. Till next time.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Project Demeter: Part 1</title>
      <link>https://antoniosbarotsis.github.io/Blog/posts/demeter/part_1/</link>
      <pubDate>Thu, 11 Nov 2021 16:37:08 +0100</pubDate>
      
      <guid>https://antoniosbarotsis.github.io/Blog/posts/demeter/part_1/</guid>
      <description>The early stages</description>
      <content:encoded><![CDATA[<h1 id="progress-since-last-time">Progress since last time</h1>
<p>When I made the first blog post, I basically just had an empty project with not much code in it. At the time of writing this, I still don&rsquo;t have an insane
amount of progress done but there&rsquo;s definitely a lot more things going on.</p>
<p>Here&rsquo;s some of the &ldquo;big&rdquo; stuff that have been added:</p>
<ul>
<li>
<p>Added a PSQL database container</p>
<p>I decided to use a Postgres database because of the <a href="https://postgis.net/">PostGIS</a> plugin which will allow me to work with geolocation data later on.
Right now, there&rsquo;s not a whole lot going on in the database; I&rsquo;ve only added the <code>User</code> and <code>Order</code> fields because I wanted to implement authentication.
The next model that should get added soon will probably be the <code>Owner</code> and after that I think I&rsquo;ll rethink the rest of my models and eventually add those
all together. I also created a class that applies any pending migrations to the database and clears + seeds it every time the server runs. The latter
will of course not be around when the app is complete but for now it is very handy for manual testing. You can find the class
<a href="https://github.com/AntoniosBarotsis/Demeter/blob/master/src/Infrastructure/Data/DatabaseSeeder.cs">here</a> if you want to see how that works but in
essence it is nothing more than one hard coded user with one past order with no items (did not want to also add items this soon for testing).</p>
</li>
<li>
<p>Added a Redis database container</p>
<p>I&rsquo;ve been thinking of using a cache for a while in my project but was limited by the fact that I couldn&rsquo;t run more than one container when hosting
my apps as stated earlier so was pretty excited for this to say the least. I came up with a weird (perhaps overcomplicated way) of setting the
key values using enums, idea being that I don&rsquo;t randomly make a small typo and end up getting cache misses when I shouldn&rsquo;t be. The general cache service
can be found <a href="https://github.com/AntoniosBarotsis/Demeter/blob/master/src/Infrastructure/Data/Redis/RedisCacheService.cs">here</a> and an example usage
for users is <a href="https://github.com/AntoniosBarotsis/Demeter/blob/master/src/Domain/Services/UserService.cs">here</a>.</p>
</li>
<li>
<p>Used a bunch of libraries that I&rsquo;ve wanted to glue together for some time, namely:</p>
<ul>
<li>Automapper</li>
<li>MediatR with CQRS</li>
<li>Serilog</li>
</ul>
<p>Automapper is extremely useful and will definitely be using it in probably all my future projects. In my last &ldquo;big&rdquo; project which was Gromceri
(<em>haven&rsquo;t talked much about it and have also not finished + kind of abandoned but might get back to that at some point, you can read some stuff
about it <a href="https://twitter.com/gromceri">here</a></em>) I was using function expressions which had the advantage of being chainable with my LINQ queries
(and thus looking cool) but looking back, that was not such a clean looking solution and I also do not think that it was that great of an idea to
convert entities to their DTOs right after a query.</p>
<p>MediatR and CQRS are both pretty cool and I can kind of see why they would be useful in very big, complicated projects but I feel like they are
way too verbose for a one man project. However, that being said they do help keep the overall flow cleaner by separating the layers which is why
I will rethink whether I want to stick to MediatR at the end of this project&rsquo;s development when I&rsquo;ll have a better idea of it.</p>
<p>Yes I&rsquo;ve been wanted to use loggers properly in an actual project for some time. This will definitely get more interesting once I add Elasticsearch
and Kibana to the project but even now it is cool. I also want to add error handling middleware which will definitely leverage the logger.</p>
</li>
<li>
<p>Finally did some proper testing!</p>
<p>If you visit the project you&rsquo;ll see that I&rsquo;ve added Codecov to it to force myself to test more. At the moment I have only been testing my Domain
which is where the models and their Services live and I&rsquo;m not sure if I will also test my other 2 layers.</p>
<p>One thing that I want to admit is that testing definitely forces you to write cleaner code. I really appreciate dependency injection and an overall
separation of functionality a lot more after having sank quite some time into testing my code.</p>
<p>A few very helpful libraries I used for my tests are:</p>
<ul>
<li>
<p><a href="https://autofixture.github.io/">Autofixture</a></p>
<p>This is such a great tool and I wish I learnt about it earlier. TLDR: It is used to instantiate your classes with random data. The great thing about it
is that, well, you don&rsquo;t have to type everything out yourself which except for being time saving, saves you the errors when your classes change
and can also help in discovering errors with your logic given specific input (since it is random).</p>
<p>What I really like about it is that you can also control the values of specific attributes while everything else is random. For example, one thing
I did in some of my tests is have a predefined order price and I wanted the menu items themselves to have random data but that given price, this is
very easy to do with this package!</p>
</li>
<li>
<p><a href="https://nsubstitute.github.io/">NSubstitute</a></p>
<p>NSubstitute is used for mocking, that&rsquo;s it. It has a very clean syntax that really works for me and it just works. I don&rsquo;t think I&rsquo;ll be switching that
for a different mocking library any time soon.</p>
</li>
<li>
<p><a href="https://fluentassertions.com/introduction">FluentAssertions</a></p>
<p>Similarly, Fluent Assertions have a very neat syntax for assertions that just works nicely. Also coming from Java&rsquo;s JUnit, testing for exceptions
finally has syntax you can memorize.</p>
</li>
</ul>
</li>
<li>
<p>Added JWT Role based authentication</p>
<p>It is not the first time I implemented JWT in a project but was very glad that it took me about an hour instead of a few weeks like last time.
I borrowed much of the configuration for stuff like password strength and what not from that previous implementation but reworked both the classes
associated with authentication themselves and their position in the project. I also feel like I added enough self explanatory exception messages
for when stuff fails. I also added roles to the authentication scheme (which I think work but I haven&rsquo;t added owners yet so can&rsquo;t be certain).
This was a lot easier than I thought it was gonna be. The only interesting thing about this is that I used an enum for the role which I found out how to
store as a string to the database (and in the response DTO) instead of an int.</p>
<p>Something that wasn&rsquo;t great was how the <code>userManager</code> class from the Identity package does not have a relevant interface which meant I couldn&rsquo;t really
test it so I instead made my own interface with the methods that I am going to need and made the implementation use an instance of <code>userManager</code> which
has the same effect but makes it testable.</p>
</li>
</ul>
<p>Something that doesn&rsquo;t really fit anywhere else is that I did a bit more research on RabbitMQ and found out that what I probably want to use is the RPC
functionality it offers which <em>I think</em> will require another project running. If that is the case I will probably make a very simple, one endpoint
separate API project that I can run from the docker compose file. Since I don&rsquo;t actually want to do something more with it other than make it wait for a bit
as if it is processing the payment or whatever and then return &ldquo;payment successful&rdquo; this should work fine. I am not entire sure how this will work yet
(does the code wait for the remote call to be completed or does it receive a notification?) but that should be one of the very last things that I will add
to the project so it is not really something to worry about at the moment.</p>
<h1 id="the-next-steps">The next steps</h1>
<p>I believe that I will be toning down the amount of work that I put into the project for a little while because of some irl issues and university + work
being a thing. I also don&rsquo;t have an exact plan of what to do next but here&rsquo;s some of the stuff that I will work on for the next post</p>
<ul>
<li>Add more models to the database</li>
<li>Use redis for most if not all endpoints</li>
<li>Add a refresh token for the JWT</li>
<li>Make a <code>login</code> and <code>refresh</code> endpoint</li>
<li>Have a user endpoint that returns data only for the user making the request</li>
<li>Add Elasticsearch and Kibana (?)</li>
</ul>
<h1 id="closing">Closing</h1>
<p>As always, thanks for reading! The repo can be found <a href="https://github.com/AntoniosBarotsis/Demeter">here</a>. I am really proud of the progress of the project
so far and I am just hoping that I can get back to being productive on it after I deal with everything else going on in my life right now</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Project Demeter: Part 0</title>
      <link>https://antoniosbarotsis.github.io/Blog/posts/demeter/part_0/</link>
      <pubDate>Fri, 05 Nov 2021 17:20:51 +0100</pubDate>
      
      <guid>https://antoniosbarotsis.github.io/Blog/posts/demeter/part_0/</guid>
      <description>The beginning of my new project.</description>
      <content:encoded><![CDATA[<h1 id="what-is-project-demeter">What is Project Demeter</h1>
<p>This is my latest passion past-time toy project that I will be working on for some time. You can read some details about it
<a href="https://github.com/AntoniosBarotsis/Demeter">here</a> but long story short: it will be a food ordering service minus the payment bit.</p>
<p>And since I posted the repository, I should note that I have already changed my mind for some of the stuff mentioned there
(mainly that I will be using Postgres instead of SQLite and that I will definitely use RabbitMQ) so don&rsquo;t take everything I said
there word for word as this is still pretty early in development.</p>
<h1 id="why">Why</h1>
<p>I think it will be a great learning experience for me (if I actually push myself to finish it).</p>
<p>There are so many things that I want to make use of and it feels pretty overwhelming at the moment but I&rsquo;m sure that will improve
once I start actually working on it. So far the only thing that I have figured out is how to use <a href="https://postgis.net/">PostGIS</a>
(which is a Postgres plugin that allows you to work with spatial data) to make queries about stuff&rsquo;s locations.</p>
<h1 id="my-progress">My Progress</h1>
<p>I figured that would be a good starting point considering that one of the main features I want this service to have is making radial distance
queries around your location for near by restaurants. The SQL itself is not hard, I just have to figure out how to convert that to something EF Core
understands and am set for that. Other than that, the only thing that I have at the moment is a basic project structure with no actual code in it.
I will be probably working on figuring out what my models should look like today and after that&rsquo;s done I&rsquo;ll see what follows.</p>
<p>Part of the reason why I&rsquo;m writing this is because it is actually pretty decent motivation for me to keep going but also because I feel like this
would be very interesting for anyone trying to start a new project to read through once I&rsquo;m finished.</p>
<p>I think that that&rsquo;s about it for now so see you all in part 1 hopefully soon.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>