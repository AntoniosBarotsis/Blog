<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Github Actions on My Blog</title>
    <link>https://antoniosbarotsis.github.io/Blog/tags/github-actions/</link>
    <description>Recent content in Github Actions on My Blog</description>
    <image>
      <url>https://antoniosbarotsis.github.io/Blog/papermod-cover.png</url>
      <link>https://antoniosbarotsis.github.io/Blog/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Mar 2022 22:29:48 +0100</lastBuildDate><atom:link href="https://antoniosbarotsis.github.io/Blog/tags/github-actions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Veritas</title>
      <link>https://antoniosbarotsis.github.io/Blog/posts/posharp/</link>
      <pubDate>Sun, 06 Mar 2022 22:29:48 +0100</pubDate>
      
      <guid>https://antoniosbarotsis.github.io/Blog/posts/posharp/</guid>
      <description>My attempt at a testing framework</description>
      <content:encoded><![CDATA[<h1 id="what-is-veritas">What is Veritas</h1>
<p>Veritas is a small testing framework that I am building for <a href="https://github.com/pijuskri/Po-Sharp">a friend&rsquo;s compiler</a>. He started
working on this project recently and seeing as how I found it very interesting, I decided to contribute to it. I then remembered that
I do not know how to build compilers so I instead decided to finally look into things like reflection and frameworks and decided
to build one for his language.</p>
<p>All cool projects have 2 things in common: a pipeline badge and a mythological name, so I made a pipeline and found out that the Romans
had a goddess of truth called <a href="https://en.wikipedia.org/wiki/Veritas">Veritas</a>, somehow the Romans did not have a goddess of Unit
Testing Frameworks so I unfortunately had to go with that.</p>
<h1 id="what-does-it-do">What does it do</h1>
<p>The fact that building a framework that is written in one language and tests another one is complicated should not be a surprise.</p>
<p>I essentially had to come up with a way of representing Po# code (that&rsquo;s what my friend called the language) as well as compiling,
executing it and validating its output. I also wanted to make working with it not too different from commonly used frameworks as in
I wanted everything to work through annotations, the tester should not have to worry about what was happening behind the scenes for the
tests to work.</p>
<h1 id="but-what-does-using-veritas-look-like">But what does using Veritas look like?</h1>
<p>I am glad you asked! Here&rsquo;s an example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#a6e22e">@Test</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestExample</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> valTest1<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">Boolean</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span>
    <span style="color:#e6db74">&#34;&#34;&#34;def main(): int {
</span><span style="color:#e6db74">         val a = 5;
</span><span style="color:#e6db74">         print(a);
</span><span style="color:#e6db74">         return 0;
</span><span style="color:#e6db74">       }&#34;&#34;&#34;</span>
      <span style="color:#f92672">.</span><span style="color:#a6e22e">ShouldBe</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;5&#34;</span><span style="color:#f92672">)</span>
      <span style="color:#f92672">.</span><span style="color:#a6e22e">Run</span><span style="color:#f92672">()</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>If the code seems weird to you then worry not for there are <a href="https://github.com/pijuskri/Po-Sharp/blob/master/docs/Guide.md">docs</a> about it.</p>
<p>I am not sure if this is a common thing under other languages or maybe under a different name but I have been doing a lot of C# lately
and there is this concept of &ldquo;fluent&rdquo; syntax which essentially is code that is very intuitive and easy to read, almost like reading plain
English. I was heavily inspired by <a href="https://fluentassertions.com/introduction">Fluent Assertions</a> and I want to add/change some stuff on the
Veritas interface to make it a little more like it as I really like using it, I believe you can already see that it heavily inspired
Veritas' design.</p>
<p>At this point, you might have noticed the interesting return type, a boolean string tuple? The boolean indicates whether the test passed or
failed while the string holds a message useful for debugging (so if a test fails, it can show the difference between expected and actual
value). I believe that because of how my test invocation works I cannot get the return value of the code directly, hence this ugly tuple,
it&rsquo;s been some time since I &ldquo;designed&rdquo; this.</p>
<p>As I mentioned earlier, runtime exceptions aren&rsquo;t fully implemented into the language yet but when it comes to compiler exceptions you
can do the following.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> parseErrorTest<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">Boolean</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span>
  <span style="color:#e6db74">&#34;{def a; a = 5; print(a);}&#34;</span>
    <span style="color:#f92672">.</span><span style="color:#a6e22e">ShouldThrow</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ParseException</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">))</span>
</code></pre></div><p>Something similar will be added for runtime exceptions with possibly a <code>.WithMessage</code> option to verify that the code crashed with the
appropriate message but that will depend on how concise those messages end up being. The compiler error messages are a bit too
dev-debug friendly rather than language-user friendly for the time being so <code>.WithMessage</code> does not make sense for compile-time errors,
they essentially look like a small stack trace.</p>
<p>Another thing that is perhaps worth mentioning is the use of extension methods. Extension methods, in essence, add methods to a class from
outside of this class. That sounds terribly boring until you realize how useful it is in some scenarios, in this case, it just looks a
bit cleaner. Using extension methods I could ditch the old syntax of the tests that looked like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> parseErrorTest<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">Boolean</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span>
  <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">PoSharpScript</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{def a; a = 5; print(a);}&#34;</span><span style="color:#f92672">)</span>
    <span style="color:#f92672">.</span><span style="color:#a6e22e">ShouldThrow</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ParseException</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">))</span>
</code></pre></div><p>and instead go away with the class instantiation. I attached a few methods to the Scala String class which in turn call <code>PoSharpScript</code>
under the hood.</p>
<p>Scala implements extension methods through <em>implicit</em> classes;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PoSharpImplicit</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> code<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">IPoSharp</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">ShouldBe</span><span style="color:#f92672">(</span>expected<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">PoSharpScript</span> <span style="color:#f92672">=</span> 
    <span style="color:#a6e22e">PoSharpScript</span><span style="color:#f92672">(</span>code<span style="color:#f92672">).</span><span style="color:#a6e22e">ShouldBe</span><span style="color:#f92672">(</span>expected<span style="color:#f92672">)</span>

  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">ShouldThrow</span><span style="color:#f92672">(</span>expected<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Throwable</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">Boolean</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> 
    <span style="color:#a6e22e">PoSharpScript</span><span style="color:#f92672">(</span>code<span style="color:#f92672">).</span><span style="color:#a6e22e">ShouldThrow</span><span style="color:#f92672">(</span>expected<span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>
</code></pre></div><p><code>IPoSharp</code> is a trait (or interface) that defines the 2 methods you can see below and <code>PoSharpScript</code> is the main class I use to interact
with Po# code. I made use of this recently as a wrapper to the <code>PoSharpScript</code> class since the logic was already implemented there,
this is purely for syntactic sugar.</p>
<h1 id="running-the-test-code">Running the test code</h1>
<p>This part is a little messy. Compiling and writing the assembly code to a file is easy since there are methods for this
in the main package of the compiler but I also have to run it somehow. In case you haven&rsquo;t checked out the repo, you need WSL to run
the code, you cannot run some of the tools natively on windows. Thankfully, Scala has this <a href="https://scala-lang.org/api/3.1.1/scala/sys/process.html">Process</a>
class that can help with that. I can use that class to spawn an external process that launches WSL and runs MAKE</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">import</span> scala.sys.process.Process

<span style="color:#a6e22e">Process</span><span style="color:#f92672">(</span><span style="color:#e6db74">s&#34;wsl make TARGET_FILE=</span><span style="color:#e6db74">$fileName</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">).!!</span>
</code></pre></div><p>This snippet returns anything that would normally get printed to the terminal if we were to run this command. <code>TARGET_FILE</code> is a variable
used in the makefile to specify the <code>.asm</code> file as well as the executable.</p>
<h1 id="how-and-why-did-i-make-use-of-multi-threading">How and why did I make use of multi-threading</h1>
<p>The way the compiler works is: it gets fed some input in Po# from either a <code>.txt</code> file or in this case just a string, that gets parsed
and compiled to <a href="https://nasm.org/">NASM</a> which gets dumped to a <code>.asm</code> file which we can now finally execute. That&rsquo;s cool but how can
we actually get the test output then? Well, there doesn&rsquo;t seem to be a good solution to this, or at least not one that I could come up with.
What I settled for is reading the last thing that the code prints which of course requires the snippet to print something. As of now,
runtime exceptions have not been fully added yet but when that happens, the same would apply for getting the exception message and I could
additionally check the exit code.</p>
<p>Executing the test snippets is terribly slow because of all the file accesses + compilation required + spawning the external WSL process.
At the time of writing this, 7 tests executed sequentially take 5-6 seconds, this will only get worse with more tests. Since there are only
so many tests as of now we can afford to assign one test per thread (which seems to be the most efficient for the time being), that takes the
execution time down to around a second or two, this will hopefully scale much better than the sequential solution.</p>
<p>Since a <code>.asm</code> file gets created for each test I need to make sure that they have unique names so the different threads don&rsquo;t cause issues.
I decided to set the file name to <code>packageName.className.methodName</code> which should be unique at all times. These are also cleared after
all tests are finished executing so no artifacts are left behind.</p>
<p>I tried to think a bit ahead here and try to find out what would be a good future-proof optimization to make. Up until this point,
spawning one thread per test is the most efficient way of running the tests which if you&rsquo;ve done multi-threading may sound overkill
and or counterintuitive but again, the process of running a test is very slow. But since it&rsquo;s probably not a good idea to allocate
threads in this way for 1000 tests I decided to allow for chunking the test methods per thread which should be the best of both worlds;
it is not fully sequential so we have a performance boost but it also scales better since each thread will be handling more than one
test at a time. This should in theory be faster in the future when more tests get added compared to having a set amount of available
threads with one test each and having to wait for them to finish running before you allocate another one for the next test. Since it is
still early and I can&rsquo;t know what the optimal amount of threads or number of chunks is both are variables.</p>
<h1 id="detecting-test-methods-and-invoking-them">Detecting test methods and invoking them</h1>
<p>I settled with the following:</p>
<ul>
<li>All test classes must be in the <code>test</code> package</li>
<li>All test methods must be defined inside of a class annotated with <code>@Test</code></li>
<li>All test methods must include the keyword <code>test</code> in their name</li>
</ul>
<p>I kind of combined what <a href="https://junit.org/junit5/">JUnit</a> and <a href="https://pytest.org/">PyTest</a> do with the <code>@Test</code> and method names (although
I think PyTest does it with filenames instead of method names). I could&rsquo;ve made it so you need the methods annotated instead but decided to
go for this instead for no particular reason other than it will look a bit less cluttered. Since I consider tests to have <code>test</code> in their
method name one can also easily define helper methods in the class and they won&rsquo;t be treated as tests.</p>
<p>I found <a href="https://github.com/ronmamo/reflections">this</a> a great library that allows you to easily use reflection.</p>
<p>I first need to get all classes inside the <code>test</code> package which I achieve with the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">import</span> org.reflections.Reflections
<span style="color:#66d9ef">import</span> org.reflections.scanners.Scanners.TypesAnnotated
<span style="color:#66d9ef">import</span> org.reflections.util.ConfigurationBuilder

<span style="color:#66d9ef">val</span> reflections <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Reflections</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ConfigurationBuilder</span><span style="color:#f92672">()</span>
  <span style="color:#f92672">.</span>forPackage<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;test&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#f92672">.</span>setScanners<span style="color:#f92672">(</span><span style="color:#a6e22e">TypesAnnotated</span><span style="color:#f92672">))</span>
</code></pre></div><p>I then take the results of that query and extract the class names from the package. At this point, the class names
should look something like <code>test.className</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">reflections
  <span style="color:#f92672">.</span>getStore
  <span style="color:#f92672">.</span>get<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;TypesAnnotated&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#f92672">.</span>get<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;scala.reflect.ScalaSignature&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#f92672">.</span>toArray
  <span style="color:#f92672">.</span>filter<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>asInstanceOf<span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">].</span>contains<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;test.&#34;</span><span style="color:#f92672">))</span>
  <span style="color:#f92672">.</span>map<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>asInstanceOf<span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])</span>
</code></pre></div><p>Here&rsquo;s where the more interesting things happen. We need to first get the class and then also create an instance for it</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> testClass <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ScalaClassLoader</span><span style="color:#f92672">(</span>getClass<span style="color:#f92672">.</span>getClassLoader<span style="color:#f92672">).</span>tryToInitializeClass<span style="color:#f92672">(</span>c<span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> instance  <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ScalaClassLoader</span><span style="color:#f92672">(</span>getClass<span style="color:#f92672">.</span>getClassLoader<span style="color:#f92672">).</span>create<span style="color:#f92672">(</span>c<span style="color:#f92672">)</span>
</code></pre></div><p>This may be a little confusing but the two are different; <code>testClass</code> is essentially a reference to the test class. This later
allows us to use <code>getMethods</code> to find the tests inside of it which, in order to run, we need to instantiate it first hence the
<code>instance</code>. I made a separate method for executing the test since the code was getting a little cluttered. This just invokes the
method and based on the return value, it prints whether the test passed or not.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> runTest<span style="color:#f92672">(</span>instance<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">AnyRef</span><span style="color:#f92672">,</span> el<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Method</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
  <span style="color:#75715e">// Catches invalid tests (say main is missing from the code snippet)
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
    lastMethodName <span style="color:#66d9ef">=</span> el<span style="color:#f92672">.</span>getName
    <span style="color:#66d9ef">val</span> <span style="color:#f92672">(</span>output<span style="color:#f92672">,</span> actual<span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> el<span style="color:#f92672">.</span>invoke<span style="color:#f92672">(</span>instance<span style="color:#f92672">).</span>asInstanceOf<span style="color:#f92672">[(</span><span style="color:#66d9ef">Boolean</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">)]</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>output<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
      <span style="color:#75715e">// print passed
</span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
      <span style="color:#75715e">// print failed
</span><span style="color:#75715e"></span>      exitCode <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> e<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Exception</span> <span style="color:#f92672">=&gt;</span>
      <span style="color:#75715e">// print error
</span><span style="color:#75715e"></span>      exitCode <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">1</span>
  <span style="color:#f92672">}</span> 
<span style="color:#f92672">}</span>
</code></pre></div><p>This is a little bit simplified compared to the actual method; I wanted to be able to run this method from different threads
so I had to use a synchronized <code>StringBuilder</code> for the outputs. In order to not lock it too often, I chunk the results to a
temporary <code>StringBuiler</code> and only push them to the synchronized one once the thread is done executing its tests.</p>
<ul>
<li>Was this necessary? No</li>
<li>Does it give any significant performance increase? Not really</li>
<li>Is it cool that I did it regardless? Yeah 😎</li>
</ul>
<p>On the topic of cool things, Scala has <a href="https://www.scala-lang.org/api/current/scala/io/AnsiColor.html">this</a> library which makes it
easy for you to use ANSI escape sequences and add some color to your prints!</p>
<h1 id="creating-the-pipeline">Creating the pipeline</h1>
<p>Building the pipeline was more complicated than it sounds. For starters, the project initially used <a href="https://www.scala-sbt.org/">SBT</a>.
When I was developing the framework I would test run it using Intellij which would compile everything with Java behind the scenes unlike
SBT which uses Scala. Turns out the 2 have some runtime differences when it comes to the classloaders and the test classes could not
be detected so I eventually made a merge request that made everything work through Gradle which took a bit of fiddling around until
everything started working again but at least the classloaders were not complaining anymore.</p>
<p>Another issue I had was getting the pipeline to work on an Ubuntu image which seemed to also have some classloader issues
because the test methods could not get invoked. In case anyone is willing to take a look and potentially fix it, here&rsquo;s the
<a href="https://github.com/AntoniosBarotsis/Po-Sharp/runs/5428580842?check_suite_focus=true">pipeline run</a> and the
<a href="https://github.com/AntoniosBarotsis/Po-Sharp/blob/152fbbdeb5b570024a4210e2563f3295459ef9cf/.github/workflows/workflow.yml">pipeline yml file</a>.</p>
<p>Other than that small hiccup, the rest was fairly standard stuff.</p>
<p>I want the pipeline to run on master pushes and on pull requests. The job should run on a windows image, I checkout to the repo and use
<a href="https://github.com/Vampire/setup-wsl">this</a> action to set up WSL, Gradle has a short post about setting up a Gradle build workflow
<a href="https://github.com/marketplace/actions/gradle-build-action">here</a> which I used for the setup and finally I install any WSL
dependencies I need and run the Gradle task for the tests</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build and Test</span>

<span style="color:#f92672">on</span>:
  <span style="color:#f92672">push</span>:
    <span style="color:#f92672">branches</span>:
      - <span style="color:#e6db74">&#34;master&#34;</span>
  <span style="color:#f92672">pull_request</span>:

<span style="color:#f92672">jobs</span>:
 <span style="color:#f92672">gradle</span>:
   <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">windows-2022</span>
   <span style="color:#f92672">steps</span>:
   - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>

   - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Set up WSL</span>
     <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">Vampire/setup-wsl@v1</span>

   - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-java@v2</span>
     <span style="color:#f92672">with</span>:
       <span style="color:#f92672">distribution</span>: <span style="color:#ae81ff">temurin</span>
       <span style="color:#f92672">java-version</span>: <span style="color:#ae81ff">17</span>

   - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Gradle</span>
     <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">gradle/gradle-build-action@v2</span>
     <span style="color:#f92672">with</span>:
       <span style="color:#f92672">gradle-version</span>: <span style="color:#ae81ff">7.3</span>

   - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Execute Gradle build</span>
     <span style="color:#f92672">run</span>: <span style="color:#ae81ff">gradle build</span>

   - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install dependencies</span>
     <span style="color:#f92672">shell</span>: <span style="color:#ae81ff">wsl-bash {0}</span>
     <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">       apt update
</span><span style="color:#e6db74">       apt install make nasm gcc -y</span>       

   - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run tests</span>
     <span style="color:#f92672">run</span>: <span style="color:#ae81ff">gradle runTests</span>
</code></pre></div><p>About a month and a half had passed since I started working on Veritas before I finally saw this</p>
<p><img loading="lazy" src="images/tests.png#center" alt="tests"  />
</p>
<p>and this</p>
<p><img loading="lazy" src="https://img.shields.io/github/workflow/status/pijuskri/Po-Sharp/Build%20and%20Test?style=for-the-badge#center" alt="GitHub Workflow Status"  />
</p>
<h1 id="the-future">The future</h1>
<p>As I mentioned earlier, the framework is not done which is to be expected since the language itself is not done evolving. Now that the
the pipeline is also complete I have reached a point where the framework is both capable enough to test anything currently present in the
language and can ensure that nothing breaks over time through the pipeline.</p>
<p>That being said, I now have the freedom to worry about more &ldquo;trivial&rdquo; things such as</p>
<ul>
<li>Actual error handling that does not simply wrap the entire framework in a try-catch</li>
<li>Improved error messages for anything that could go wrong</li>
<li><del><em>Steal</em></del> get inspiration from Fluent Assertions on new things to add</li>
</ul>
<p>Of course, this is what I can come up with now, more stuff will probably appear along the way as the language evolves.</p>
<h1 id="closing">Closing</h1>
<p>All in all, it has been really cool and interesting to work on this. It was really interesting to dive into reflection, it really
is fascinating to me how you can interact with a project&rsquo;s source code through &hellip; more source code. It also gives you a better
understanding of how these frameworks function which is great. Multi-threading was another thing I enjoyed getting into, I recently
developed an interest to parallel programming and this is one of the ways I pursued that interest. It&rsquo;s nice knowing your code
helps someone and makes their lives easier but also more boring because who likes writing tests am I right?</p>
<p>Really interested in seeing where this will go from now, till next time!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Zip it and ship it!</title>
      <link>https://antoniosbarotsis.github.io/Blog/posts/zipitandshipit/</link>
      <pubDate>Tue, 01 Feb 2022 19:05:19 +0200</pubDate>
      
      <guid>https://antoniosbarotsis.github.io/Blog/posts/zipitandshipit/</guid>
      <description>How I published a CLI tool in Chocolatey and Nuget.</description>
      <content:encoded><![CDATA[<!-- fix the date! -->
<h1 id="introduction">Introduction</h1>
<p>I recently started working on a command line tool that uses git hooks to remind you to run your
tests and builds before pushing your code among other stuff and I decided to package that and
publish it so anyone could use it. The project itself is nothing too impressive or innovative
so in this post I will be mostly focusing on the packaging and publication process rather than
the project itself but in case you are interested in checking it out, click
<a href="https://github.com/AntoniosBarotsis/Rember">here</a> and go make some issues :)</p>
<p>I&rsquo;ll be explaining how I published said package and how to make a Github Actions CD workflow
to publish your new releases automatically.</p>
<h2 id="why">Why</h2>
<p>I feel like most if not all developers find the idea of making their work available for anyone
to check out and use an exciting one and I definitely relate to that. I personally really like
working on things that can be used by other developers specifically and that&rsquo;s the main reasons
why I started this project and why I decided to make it easily accessible to anyone (unless
you are not on windows because I was too lazy to check how that would work).</p>
<p>I decided early on that I wanted to publish my code on 2 platforms; the package manager of my
language of choice (in this case, NuGet) and a more general purpose package manager like
<a href="https://chocolatey.org/">Chocolatey</a> so that my audience would not be limited to developers
from my tech stack only.</p>
<h2 id="what-did-i-build-exactly">What did I build exactly</h2>
<p>The project was built using C# mostly because of <a href="https://www.youtube.com/watch?v=JNDgcBDZPkU">this</a>
video I came across (great YouTuber by the way, make sure to check his channel out for C# content). TLDR; C#
has this thing called <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools">dotnet tools</a> which
are essentially command line applications that are very easy to make and package. The linked video walks you
through creating one from scratch.</p>
<h1 id="uploading-to-nuget">Uploading to NuGet</h1>
<h2 id="preparing">Preparing</h2>
<p>Once you have your CLI tool up and running there&rsquo;s only that many steps left to push it to NuGet.</p>
<p>The mentioned video already guides you through adding most of the stuff that you need in your <code>.csproj</code>
file but here&rsquo;s a few more things you might want to add:</p>
<ul>
<li>
<p>A README file</p>
<p>If you want your NuGet package to display the README file you spent hours filling with meaningless
badges, this is for you. All you have to do is add the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;PropertyGroup&gt;</span>
  ...
  <span style="color:#f92672">&lt;PackageReadmeFile&gt;</span>README.md<span style="color:#f92672">&lt;/PackageReadmeFile&gt;</span>
<span style="color:#f92672">&lt;/PropertyGroup&gt;</span>

<span style="color:#f92672">&lt;ItemGroup&gt;</span>
  <span style="color:#f92672">&lt;None</span> <span style="color:#a6e22e">Include=</span><span style="color:#e6db74">&#34;../README.md&#34;</span> <span style="color:#a6e22e">Pack=</span><span style="color:#e6db74">&#34;true&#34;</span> <span style="color:#a6e22e">PackagePath=</span><span style="color:#e6db74">&#34;\&#34;</span> <span style="color:#f92672">/&gt;</span>
<span style="color:#f92672">&lt;/ItemGroup&gt;</span>
</code></pre></div><p>This tells NuGet to use our <code>README.md</code> file as the package README file but for that to work we must
make sure that this is packaged into our <code>nupkg</code> file. This might be different in your project but
my project has a separate folder for the actual code instead of it also being in the root of the project</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">│   README.md
│   Rember.sln
│
├───publish
│       Rember
│       Rember.exe
│
├───Rember
│   │   Rember.csproj
</code></pre></div><p>Because of that, my <code>Include</code> parameter goes a directory up to reference the README file.</p>
</li>
<li>
<p>Other useful tags might include <code>RepositoryUrl</code> to link your Github repo and <code>PackageTags</code>
to provide a list of space-delimited tags for your package.</p>
</li>
<li>
<p>I do also recommend specifying the <code>RuntimeIdentifier</code> to something like <code>win-x64</code> although from
what I understand this is not necessary but better safe than sorry!</p>
</li>
</ul>
<h2 id="pushing-the-package">Pushing the Package</h2>
<p>That pretty much concludes the needed preparations for NuGet so time to actually push the thing.</p>
<p>Run <code>dotnet pack</code> and you should get something along the lines of <code>Successfully created package 'path/to/package.nupkg'</code>.</p>
<p>Next you want to grab yourself a NuGet API Key from <a href="https://www.nuget.org/account/apikeys">here</a>
and run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dotnet nuget push path/to/package.nupkg <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --api-key &lt;API_KEY&gt; <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --source https://api.nuget.org/v3/index.json
</code></pre></div><p>If all goes well your package will be soon available on NuGet! Wasn&rsquo;t that simple?</p>
<h1 id="uploading-to-chocolatey">Uploading to Chocolatey</h1>
<h2 id="preparing-1">Preparing</h2>
<p>Chocolatey requires you to provide a so called <code>nuspec</code> file which essentially provides some details
for your package. I personally found their <a href="https://docs.chocolatey.org/en-us/create/create-packages#nuspec">docs</a>
a bit confusing so if you get confused perhaps looking over at my repository could help you out more after you&rsquo;ve
read through them.</p>
<p>You will see that most of the stuff we specify are essentially the same as what we specified earlier for NuGet.
Only thing to note here is that you want to make sure that everything your package needs ends up in the <code>tools</code>
folder.</p>
<h2 id="compiling">Compiling</h2>
<p>Uploading to Choco is a little more complicated. First of all, we need to compile our code to a single
file that has everything it needs to run bundled inside of it aka, a self contained file. It is also a
good idea to try and remove anything that is not used in terms of libraries considering how much larger
this file is going to be compared to the <code>nupkg</code> file we created earlier. Take a look at the docs for
<a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish">dotnet publish</a> but TLDR; our command
will look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dotnet publish -o tools <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --self-contained True <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  /property:PublishTrimmed<span style="color:#f92672">=</span>True <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  /property:PublishSingleFile<span style="color:#f92672">=</span>True
</code></pre></div><p>The reason why I specify these properties in the arguments of the command instead of in the <code>csproj</code>
file is because I would have to keep toggling them on and off depending on whether I was
targetting NuGet or Choco.</p>
<p>I also specify the following in the <code>csproj</code> file to hopefully cut the executable file size down a
bit more:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;DebugType&gt;</span>none<span style="color:#f92672">&lt;/DebugType&gt;</span>
<span style="color:#f92672">&lt;DebugSymbols&gt;</span>false<span style="color:#f92672">&lt;/DebugSymbols&gt;</span>
<span style="color:#f92672">&lt;Configuration&gt;</span>release<span style="color:#f92672">&lt;/Configuration&gt;</span>
</code></pre></div><p>This should create a <code>.exe</code> file in the <code>tools</code> folder.</p>
<h2 id="pushing-to-chocolatey">Pushing to Chocolatey</h2>
<p>We are almost done! We now only need to run the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">choco pack
choco push --api-key<span style="color:#f92672">=</span>&lt;API KEY&gt;
</code></pre></div><p>Your API key can be found <a href="https://community.chocolatey.org/account">here</a> and I do not know why
navigating to your profile page is so hard on their website.</p>
<p>Publications on Chocolatey take way longer than NuGet (around 1-3 hours from personal experience)
so sit back, go grab yourself some coffee, do some laundry, watch some YouTube, call your friends,
finish that one side project you abandoned 7 months ago, and check your email every 2 minutes in
case something goes wrong with the publication.</p>
<h1 id="time-to-make-a-workflow">Time to make a Workflow</h1>
<p>Workflows are great! They do the boring, repetitive stuff for you automatically so you don&rsquo;t have
to worry about forgetting them or doing something wrong, your project looks cooler and more serious
with them but most importantly, from what I understand, they qualify you for DevOps positions which
pay quite well so that&rsquo;s the main reason why you should care about making them 👍</p>
<p>Feel free to check <a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#release">Github&rsquo;s docs</a>.</p>
<p>We first start by specifying that we want our workflow to run on a new release publication</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">on</span>:
  <span style="color:#f92672">release</span>:
    <span style="color:#f92672">types</span>: [<span style="color:#ae81ff">published]</span>
</code></pre></div><p>The release event has a bunch of different types that are explained very nicely in the documentation,
I personally chose <code>published</code> which gets triggered for normal as well as pre-releases.</p>
<p>The good news is that this is a very simply workflow because we&rsquo;ve already figured out how to do most
of the work from our terminals!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">jobs</span>:
  <span style="color:#f92672">publish</span>:
    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">windows-latest</span>
    <span style="color:#f92672">steps</span>:
      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-dotnet@v1</span>
        <span style="color:#f92672">with</span>:
          <span style="color:#f92672">dotnet-version</span>: <span style="color:#e6db74">&#39;6.0.x&#39;</span>
      <span style="color:#75715e"># Nuget </span>
      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">dotnet pack</span>
      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">dotnet nuget push .\Rember\nupkg\*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json</span>
        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Nuget publish</span>
      <span style="color:#75715e"># Choco</span>
      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">dotnet publish -o tools --verbosity normal --self-contained True /property:PublishTrimmed=True /property:PublishSingleFile=True </span>
      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">choco pack</span>
      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">choco push --api-key=${{ secrets.CHOCO_API_KEY }}</span>
        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Choco publish</span>
</code></pre></div><p>As you can see, I checkout to my repository and set up Dotnet 6 before running the exact same commands
I mentioned earlier. The only thing left now is to set the <code>NUGET_API_KEY</code> and <code>CHOCO_API_KEY</code> secrets
in your github repository and create your first release!</p>
<h1 id="closing">Closing</h1>
<p>Overall, I feel like this was a little less exciting than some of my other posts but to me, the whole process
of publishing this project was quite exciting and I wanted to write something about it. Hopefully this inspires
someone to go make his own package or library and make it available, same way Nick&rsquo;s video inspired me to work
on this project. Till next time!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Testing an ASP .NET Core project</title>
      <link>https://antoniosbarotsis.github.io/Blog/posts/aspnet_testing/</link>
      <pubDate>Fri, 29 Oct 2021 16:12:35 +0200</pubDate>
      
      <guid>https://antoniosbarotsis.github.io/Blog/posts/aspnet_testing/</guid>
      <description>Tests and automated coverage reports with .NET and Github actions</description>
      <content:encoded><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Most Web API templates I could find online do not have testing pre configured in them and the official ones do not have it at all so I thought
that I would make a post about setting up basic unit tests as well as mocking dependencies.</p>
<p>I will be using <a href="https://xunit.net/">XUnit</a> which is one of the most used testing frameworks for .NET as well as
<a href="https://fakeiteasy.github.io/">FakeItEasy</a> for mocking. In the end I will also use <a href="https://dotnetfoundation.org/projects/coverlet">Coverlet</a>
and <a href="https://about.codecov.io/">Codecov</a> for coverage reports.</p>
<p>The API will be the weather forecast template with the addition of a service layer which is what we will be testing. Let&rsquo;s get started!</p>
<h1 id="coding">Coding</h1>
<h2 id="creating-the-project">Creating the project</h2>
<p>I will be creating a solution with 2 projects, one being the API and the other one being the one for testing.</p>
<p>We start by creating a folder for the solution:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkdir TestingAPI
cd TestingAPI
dotnet new sln
</code></pre></div><p>We can now create the API project and add it to our solution:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dotnet new webapi -n src
dotnet sln add src/src.csproj
</code></pre></div><p>Similarly for our test project:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dotnet new xunit -n test
dotnet sln add test/test.csproj
</code></pre></div><p>Running <code>dotnet run --project src</code> should spin up the server and sure enough, visiting <code>https://localhost:5001/weatherforecast</code>
returns us the expected responce.</p>
<h2 id="creating-the-service">Creating the service</h2>
<p>I will create a <code>Services</code> folder and inside it add 2 files: a service interface and its implementation</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cs" data-lang="cs"><span style="color:#75715e">// IMyDependency.cs
</span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> System.Threading.Tasks;

<span style="color:#66d9ef">namespace</span> src.Services
{
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> IMyDependency
    {
        Task&lt;<span style="color:#66d9ef">string</span>&gt; GetDataFromDatabaseAsync();
    }
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cs" data-lang="cs"><span style="color:#75715e">// MyDependency.cs
</span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> System.Threading.Tasks;

<span style="color:#66d9ef">namespace</span> src.Services
{
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyDependency</span>: IMyDependency
    {
        <span style="color:#66d9ef">public</span> Task&lt;<span style="color:#66d9ef">string</span>&gt; GetDataFromDatabaseAsync()
        {
            <span style="color:#66d9ef">return</span> Task.FromResult(<span style="color:#e6db74">&#34;Hello From MyDependency!&#34;</span>);
        }
    }
}
</code></pre></div><p>Let&rsquo;s head to our controller and make use of the service we just created there so we can make sure it works:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cs" data-lang="cs"><span style="color:#75715e">// WeatherForecastController.cs
</span><span style="color:#75715e">// ...
</span><span style="color:#75715e"></span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> ILogger&lt;WeatherForecastController&gt; <span style="color:#ae81ff">_l</span>ogger;
<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> IMyDependency <span style="color:#ae81ff">_d</span>ependency;

<span style="color:#66d9ef">public</span> WeatherForecastController(ILogger&lt;WeatherForecastController&gt; logger, IMyDependency dependency)
{
    <span style="color:#ae81ff">_l</span>ogger = logger;
    <span style="color:#ae81ff">_d</span>ependency = dependency;
}
<span style="color:#75715e">// ...
</span><span style="color:#75715e"></span><span style="color:#a6e22e">
</span><span style="color:#a6e22e">[HttpGet]</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task&lt;IEnumerable&lt;WeatherForecast&gt;&gt; Get()
{
    <span style="color:#ae81ff">_l</span>ogger.LogInformation(<span style="color:#66d9ef">await</span> <span style="color:#ae81ff">_d</span>ependency.GetDataFromDatabaseAsync());
    
    <span style="color:#75715e">// No changes below this
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">var</span> rng = <span style="color:#66d9ef">new</span> Random();
    <span style="color:#66d9ef">return</span> Enumerable.Range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>).Select(index =&gt; <span style="color:#66d9ef">new</span> WeatherForecast
    {
        Date = DateTime.Now.AddDays(index),
        TemperatureC = rng.Next(-<span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">55</span>),
        Summary = Summaries[rng.Next(Summaries.Length)]
    })
    .ToArray();
}
</code></pre></div><p>Lastly we head to <code>Startup.cs</code> to register the implementation</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cs" data-lang="cs"><span style="color:#75715e">// Startup.cs
</span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> ConfigureServices(IServiceCollection services)
{
    services.AddScoped&lt;IMyDependency, MyDependency&gt;();
    <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>}
</code></pre></div><p>If we now run the app and hit the endpoint we should see <code>Hello From MyDependency!</code> logged in the console.</p>
<h2 id="writing-our-tests">Writing our tests</h2>
<p>Let&rsquo;s navigate to our test project and write our first test</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cs" data-lang="cs"><span style="color:#75715e">// UnitTest1.cs
</span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> System.Threading.Tasks;
<span style="color:#66d9ef">using</span> FakeItEasy;
<span style="color:#66d9ef">using</span> src.Services;
<span style="color:#66d9ef">using</span> Xunit;

<span style="color:#66d9ef">namespace</span> test
{
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UnitTest1</span>
    {
<span style="color:#a6e22e">        [Fact]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task Test1()
        {
            <span style="color:#66d9ef">var</span> myDependency = <span style="color:#66d9ef">new</span> MyDependency();
            Assert.Equal(<span style="color:#e6db74">&#34;Hello From MyDependency!&#34;</span>, <span style="color:#66d9ef">await</span> myDependency.GetDataFromDatabaseAsync());
        }
    }
}
</code></pre></div><p>Here I changed the return type from <code>void</code> to <code>async Task</code> since the method we want to test is async. Running the test with
<code>dotnet test</code> passes but this is not what we want.</p>
<p>In a normal project this method could require a database connection that we probably do not want to make use of in our tests for various reasons.
This is where mocking comes into play; we can provide a fake implementation to our service methods. It might not be as apparent here why this could
be useful so let me explain.</p>
<p>Usually the way I like to structure my apps is to split them into 3 layers</p>
<ul>
<li>Controllers: handle http requests, call service layer</li>
<li>Services: business logic, call repository layer</li>
<li>Repositories: Handle database queries</li>
</ul>
<p>Coming from a Spring Boot background, my terminology might be a bit different than what is normally used for .NET projects but the idea is the same;
split your logic into layers and use dependency injection to interact between them.</p>
<p>The most important layer to test is the service layer since that&rsquo;s where all the actual &ldquo;programming&rdquo; is. In order to test that I would have to mock
my repository interface and have it return arbitrary fake data without actually using the database. You can imagine how bad of an idea it would be
if someone was to test creations, updates or deletions while using the actual database&hellip;</p>
<p>There are some other options such as using a different, in memory database for testing but we will not be covering that in this post.</p>
<p>So back to our test, how do we mock the dependency?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cs" data-lang="cs"><span style="color:#75715e">// UnitTest1.cs
</span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> System.Threading.Tasks;
<span style="color:#66d9ef">using</span> FakeItEasy;
<span style="color:#66d9ef">using</span> src.Services;
<span style="color:#66d9ef">using</span> Xunit;

<span style="color:#66d9ef">namespace</span> test
{
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UnitTest1</span>
    {
<span style="color:#a6e22e">        [Fact]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task Test1()
        {
            <span style="color:#66d9ef">var</span> myDependency = <span style="color:#66d9ef">new</span> MyDependency();
            Assert.Equal(<span style="color:#e6db74">&#34;Hello From MyDependency!&#34;</span>, <span style="color:#66d9ef">await</span> myDependency.GetDataFromDatabaseAsync());
        }
<span style="color:#a6e22e">        
</span><span style="color:#a6e22e">        [Fact]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task Test2()
        {
            <span style="color:#66d9ef">var</span> myDependency = A.Fake&lt;IMyDependency&gt;();
            A.CallTo(() =&gt; myDependency.GetDataFromDatabaseAsync()).Returns(Task.FromResult(<span style="color:#e6db74">&#34;Hello from mocked&#34;</span>));
            
            Assert.Equal(<span style="color:#e6db74">&#34;Hello from mocked&#34;</span>, <span style="color:#66d9ef">await</span> myDependency.GetDataFromDatabaseAsync());
        }
    }
}
</code></pre></div><p>Using the <code>FakeItEasy</code> package we define an instance of the <code>IMyDependency</code> interface using <code>A.Fake</code>. This right now does nothing;
we have to explicitly define what happens when one of the interface methods gets called, we do that with <code>A.CallTo</code>  which accepts a lambda
of the method in question. I am using <code>Task.FromResult</code> because the method is async. If we run the test we can see that it passes which means that
we successfully changed the &ldquo;implementation&rdquo; of our dependency. Again, this is what would normally be a repository and a database call changed to
hard coded data, similar to what would be returned from said database call.</p>
<h2 id="adding-a-ci-pipeline-with-codecov">Adding a CI pipeline with Codecov</h2>
<p>Another thing we could do is add Codecov to get a detailed view of our test coverage. The best way to do that in my
opinion is to create a Continuous Integration (CI) pipeline on Github that will generate and push code coverage information everytime we update
the repository.</p>
<p>First go to Codecov&rsquo;s website and create an account. Get your <code>CODECOV_TOKEN</code> and create a repository secret with its value on your github
repository, we will be using this later when we push our data to Codecov.</p>
<p>We also need to create a <code>codecov.yml</code> file with some basic configuration. Here&rsquo;s what I had from a previous project:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#75715e"># codecov.yml</span>
<span style="color:#f92672">comment</span>: <span style="color:#66d9ef">false</span>

<span style="color:#f92672">ignore</span>:
  - <span style="color:#e6db74">&#34;^(?!.*Services).*$&#34;</span>

<span style="color:#f92672">coverage</span>:
  <span style="color:#f92672">status</span>:
    <span style="color:#f92672">project</span>:
      <span style="color:#f92672">default</span>:
        <span style="color:#f92672">target</span>: <span style="color:#ae81ff">auto</span>
        <span style="color:#f92672">threshold</span>: <span style="color:#ae81ff">1</span><span style="color:#ae81ff">%</span>
        <span style="color:#f92672">informational</span>: <span style="color:#66d9ef">true</span>
    <span style="color:#f92672">patch</span>:
      <span style="color:#f92672">default</span>:
        <span style="color:#f92672">target</span>: <span style="color:#ae81ff">auto</span>
        <span style="color:#f92672">threshold</span>: <span style="color:#ae81ff">1</span><span style="color:#ae81ff">%</span>
        <span style="color:#f92672">informational</span>: <span style="color:#66d9ef">true</span>
</code></pre></div><p>The only interesting thing about this is that I ignored every folder that does not include <code>Services</code> since that&rsquo;s the only thing we tested.</p>
<p>Let&rsquo;s create the <code>.github/workflows/dotnet.yml</code> file and use the Github Actions template for .NET apps which includes building and testing.
We only have to add one more step for codecov to work:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#75715e"># dotnet.yml</span>
<span style="color:#f92672">name</span>: <span style="color:#ae81ff">.NET</span>

<span style="color:#f92672">on</span>:
  <span style="color:#f92672">push</span>:
    <span style="color:#f92672">branches</span>: [ <span style="color:#ae81ff">master ]</span>
  <span style="color:#f92672">pull_request</span>:
    <span style="color:#f92672">branches</span>: [ <span style="color:#ae81ff">master ]</span>

<span style="color:#f92672">jobs</span>:
  <span style="color:#f92672">build</span>:

    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>

    <span style="color:#f92672">steps</span>:
    - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup .NET</span>
      <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-dotnet@v1</span>
      <span style="color:#f92672">with</span>:
        <span style="color:#f92672">dotnet-version</span>: <span style="color:#ae81ff">5.0</span><span style="color:#ae81ff">.x</span>
    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Restore dependencies</span>
      <span style="color:#f92672">run</span>: <span style="color:#ae81ff">dotnet restore</span>
    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build</span>
      <span style="color:#f92672">run</span>: <span style="color:#ae81ff">dotnet build --no-restore</span>
    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Test</span>
      <span style="color:#f92672">run</span>: <span style="color:#ae81ff">dotnet test --no-build --verbosity normal --collect:&#34;XPlat Code Coverage&#34; -- IncludeDirectory=&#34;[.]*Services[.]*&#34;</span>
    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Codecov</span>
      <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">codecov/codecov-action@v2</span>
      <span style="color:#f92672">with</span>:
        <span style="color:#f92672">token</span>: <span style="color:#ae81ff">${{ secrets.CODECOV_TOKEN }}</span>
</code></pre></div><p>The <a href="https://github.com/codecov/codecov-action">Codecov action</a> offers a few useful parameters for you to use so if you are interested,
read their docs!</p>
<p>With all this done and pushed you just want to wait for the Action to complete. After that&rsquo;s done I can take a look at my coverage</p>
<p><img loading="lazy" src="images/codecov.png#center" alt="codecov"  />
</p>
<p>This is very useful to look at when dealing when <em>more than one directory unlike here</em>.</p>
<p>You can also take a look at the exact spots in your code that you tested/missed</p>
<p><img loading="lazy" src="images/code.png#center" alt="code"  />
</p>
<p>And finally (but certainly most importantly), codecov gives you a badge to display on your Github repo to show everyone how well tested your code
is. What&rsquo;s the point of testing if you don&rsquo;t let everyone know you did after all?</p>
<h1 id="conclusion">Conclusion</h1>
<p>Testing is basically essential to any application that is not yet another personal project doomed to be abandoned a few weeks after its inception.
If you decide to test your project I do not see why you wouldn&rsquo;t include coverage reports, whether automated or not. Codecov (and other similar tools)
allow you to set a lot of rules that would fail your pipeline if not met such as: minimum coverage, a minimum threshold of allowed coverage drop on new
commits and a lot more.</p>
<p>I hope you got something out of this post and thanks for reading! :)</p>
<p>You can find the code <a href="https://github.com/AntoniosBarotsis/TestingAPI">here</a>.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>